########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################
[display]
# mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
display_group: __voron_display

[neopixel btt_mini12864]
# To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0
initial_GREEN: 0
initial_BLUE: 1
color_order: RGB

# Set LCD RGB at startup
[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
	RESET_LCD_RGB
	
# Default RGB
[gcode_macro RESET_LCD_RGB]
# Set RGB values on boot up for each Neopixel. 
# Index 1 = display, Index 2 and 3 = Knob
# Default: Blue index+knob, white text
gcode:
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=3

# Example LCDRGB R=1 G=0 B=0
[gcode_macro SET_LCD_RGB]
gcode:
	{% set r = params.R|default(1)|float %}
	{% set g = params.G|default(1)|float %}
	{% set b = params.B|default(1)|float %}

	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3

# https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/master/lcd_tweaks.cfg
[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................
  
[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......
 
[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display chamber]
position: 2, 0
text:
  {% set chamber = printer['temperature_sensor enclosure_temp'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.4362 " }
	~voron~
  {% endif %}