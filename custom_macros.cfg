# =========================
# Print Macros
# =========================

[include bed_mesh.cfg]

[gcode_macro PURGE_LINE]
gcode:
  G90 # Use absolute coordinates
  G92 E0 # Reset extruder
  G1 Z5.0 F3000 # Move z up little to prevent scratching of surface
  G1 X5 Y5 F5000 # Move to start-line position
  G1 Z0.2 F3000
  G1 X135 Y5 F500 E15  # Draw 1st line
  G1 X135 Y5.4 F5000 # Move to side a little
  G1 X5 Y5.4 F500 E30  # Draw 2nd line
  G92 E0 # Reset extruder
  G1 Z5.0 F3000 # Move z up little to prevent scratching of surface

[gcode_macro START_PRINT]
gcode:
  {% set T_BED = params.T_BED|default(0)|float %}
  {% set T_EXTRUDER = params.T_EXTRUDER|default(0)|float %}
  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

  M140 S{T_BED} # Start heating bed
  M104 S{T_EXTRUDER} # Start heating extruder

  M190 S{T_BED} # Wait for bed to reach temperature
  M109 S{T_EXTRUDER} # Wait for extruder to reach temperature
  G90 # Use absolute coordinates
  G32 # Home, QGL, Home

  ADAPTIVE_BED_MESH SIZE={FL_SIZE} # Run bed mesh
  PURGE_LINE
  G28 Z # Home Z now that bed is to temp

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(5) %}      #edit to your park position
    {% set y = params.Y|default(5) %}      #edit to your park position
    {% set z = params.Z|default(20)|float %} #edit to your park position
    {% set e = params.E|default(0) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(0) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

# =========================
# Filament Macros
# =========================

[gcode_macro LOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E25.0 F1000 # Push some filament out
  G1 E40 F2000 # Push alot more filament out quickly
  G4 P900 # Wait 0.9 seconds
  G1 E50.0 F250 # Extrude some more out slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E5.0 F1200 # Push some filament out
  G1 E3.0 F1600 # Push a bit more filament out, faster
  G1 E-10 F2500 # Retract quickly
  G1 E-60 F2000 # Fully retract the rest out
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro PURGE]
gcode:
  G91 # Use relative coordinates
  G1 E50.0 F250 # Extrude slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro M600]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=72000
  SET_ENABLE_MOTORS
  PAUSE
  UNLOAD_FILAMENT

# =========================
# Movement Macros
# ========================= 

[gcode_macro MOVE_X]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_x DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Y]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_y DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Z]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_z DISTANCE={custom_distance} VELOCITY=10
  M84 # Disable motors

[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default

[gcode_macro CG28]
gcode:
  {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro DISABLE_MOTORS_CHECK]
variable_disable_motors: 1
gcode:
  M118 {disable_motors}

[gcode_macro SET_ENABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=0

[gcode_macro SET_DISABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=1

######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

# =========================
# Misc. Macros
# ========================= 
[gcode_macro SCREW_TILT_CALCULATE]
gcode:
  SCREWS_TILT_CALCULATE

[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro FIRMWARE_RESTART]
rename_existing: STOCK_FIRMWARE_RESTART
gcode:
  BACKUP_CFG
  STOCK_FIRMWARE_RESTART

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED